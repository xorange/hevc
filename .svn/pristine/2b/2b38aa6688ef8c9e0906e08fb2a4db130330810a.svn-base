


%define					Y_ADD			16
U_ADD					EQU		128
V_ADD					EQU		128

SCALEBITS_OUT			EQU		6
SCALEBITS_IN			EQU		13
FIX_BOUND				EQU		(1 << (SCALEBITS_IN-1))

%macro BGR_TO_YV12_INIT 2
	MOVQ MM7, [bgr_y_mul]
%endmacro

%macro BGR_TO_YV12 2
	PXOR MM4, MM4
	PXOR MM5, MM5
	MOVD MM0, [x_ptr]
	MOVD MM2, [x_ptr+x_stride]
	
	PUNPCKLBW MM0, MM4
	PUNPCKLBW MM2, MM5
	MOVQ MM6, MM0
	PADDW MM6, MM2
	PMADDWD MM0, MM7
	PMADDWD MM2, MM7
	MOVQ MM4, MM0
	MOVQ MM5, MM2
	PSRLQ MM4, 32
	PSRLQ MM5, 32
	PADDD MM0, MM4
	PADDD MM2, MM5
	
	PXOR MM4, MM4
	PXOR MM5, MM5
	MOVD MM1, [x_ptr+ARG1]
	MOVD MM3, [x_ptr+ARG1+x_stride]
	
	PUNPCKLBW MM1, MM4
	PUNPCKLBW MM3, MM5
	PADDW MM6, MM1
	PADDW MM6, MM3
	PMADDWD MM1, MM7
	PMADDWD MM3, MM7
	MOVQ MM4, MM1
	MOVQ MM5, MM3
	PSRLQ MM4, 32
	PSRLQ MM5, 32
	PADDD MM1, MM4
	PADDD MM3, MM5
	
	PUSH x_stride_d
	
	MOVD x_stride_d, MM0
	ADD x_stride_d, FIX_BOUND
	SHR x_stride_d, SCALEBITS_IN
	ADD x_stride_d, Y_ADD
	MOV [ y_ptr ], DL	

	MOVD x_stride_d, MM2
	ADD x_stride_d, FIX_BOUND
	SHR x_stride_d, SCALEBITS_IN
	ADD x_stride_d, Y_ADD
	MOV [ y_ptr + y_stride ], DL	

	MOVD x_stride_d, MM1
	ADD x_stride_d, FIX_BOUND
	SHR x_stride_d, SCALEBITS_IN
	ADD x_stride_d, Y_ADD
	MOV [ y_ptr + 1 ], DL	
	
	MOVD x_stride_d, MM3
	ADD x_stride_d, FIX_BOUND
	SHR x_stride_d, SCALEBITS_IN
	ADD x_stride_d, Y_ADD
	MOV [ y_ptr + y_stride + 1 ], DL	
	
	MOVQ MM0, MM6
	PMADDWD MM6, [bgr_v_mul]
	PMADDWD MM0, [bgr_u_mul]
	MOVQ MM1, MM0
	MOVQ MM2, MM6
	PSRLQ MM1, 32
	PSRLQ MM2, 32
	PADDD MM0, MM1
	PADDD MM2, MM6

	MOVD x_stride_d, MM0
	ADD x_stride_d, 4*FIX_BOUND
	SHR x_stride_d, (SCALEBITS_IN+2)
	ADD x_stride_d, U_ADD
	MOV [ u_ptr ], DL	

	MOVD x_stride_d, MM2
	ADD x_stride_d, 4*FIX_BOUND
	SHR x_stride_d, (SCALEBITS_IN+2)
	ADD x_stride_d, V_ADD
	MOV [ v_ptr ], DL	
	
	POP x_stride_d	
%endmacro

%macro RGB_TO_YV12_INIT 2
	MOVQ MM7, [rgb_y_mul]
%endmacro

%macro RGB_TO_YV12 2
	PXOR MM4, MM4
	PXOR MM5, MM5
	MOVD MM0, [x_ptr]
	MOVD MM2, [x_ptr+x_stride]
	
	PUNPCKLBW MM0, MM4
	PUNPCKLBW MM2, MM5
	MOVQ MM6, MM0
	PADDW MM6, MM2
	PMADDWD MM0, MM7
	PMADDWD MM2, MM7
	MOVQ MM4, MM0
	MOVQ MM5, MM2
	PSRLQ MM4, 32
	PSRLQ MM5, 32
	PADDD MM0, MM4
	PADDD MM2, MM5
	
	PXOR MM4, MM4
	PXOR MM5, MM5
	MOVD MM1, [x_ptr+ARG1]
	MOVD MM3, [x_ptr+ARG1+x_stride]
	
	PUNPCKLBW MM1, MM4
	PUNPCKLBW MM3, MM5
	PADDW MM6, MM1
	PADDW MM6, MM3
	PMADDWD MM1, MM7
	PMADDWD MM3, MM7
	MOVQ MM4, MM1
	MOVQ MM5, MM3
	PSRLQ MM4, 32
	PSRLQ MM5, 32
	PADDD MM1, MM4
	PADDD MM3, MM5
	
	PUSH x_stride_d
	
	MOVD x_stride_d, MM0
	ADD x_stride_d, FIX_BOUND
	SHR x_stride_d, SCALEBITS_IN
	ADD x_stride_d, Y_ADD
	MOV [ y_ptr ], DL	

	MOVD x_stride_d, MM2
	ADD x_stride_d, FIX_BOUND
	SHR x_stride_d, SCALEBITS_IN
	ADD x_stride_d, Y_ADD
	MOV [ y_ptr + y_stride ], DL	

	MOVD x_stride_d, MM1
	ADD x_stride_d, FIX_BOUND
	SHR x_stride_d, SCALEBITS_IN
	ADD x_stride_d, Y_ADD
	MOV [ y_ptr + 1 ], DL	
	
	MOVD x_stride_d, MM3
	ADD x_stride_d, FIX_BOUND
	SHR x_stride_d, SCALEBITS_IN
	ADD x_stride_d, Y_ADD
	MOV [ y_ptr + y_stride + 1 ], DL	
	
	MOVQ MM0, MM6
	PMADDWD MM6, [rgb_v_mul]
	PMADDWD MM0, [rgb_u_mul]
	MOVQ MM1, MM0
	MOVQ MM2, MM6
	PSRLQ MM1, 32
	PSRLQ MM2, 32
	PADDD MM0, MM1
	PADDD MM2, MM6

	MOVD x_stride_d, MM0
	ADD x_stride_d, 4*FIX_BOUND
	SHR x_stride_d, (SCALEBITS_IN+2)
	ADD x_stride_d, U_ADD
	MOV [ u_ptr ], DL	

	MOVD x_stride_d, MM2
	ADD x_stride_d, 4*FIX_BOUND
	SHR x_stride_d, (SCALEBITS_IN+2)
	ADD x_stride_d, V_ADD
	MOV [ v_ptr ], DL	
	
	POP x_stride_d	
%endmacro


%macro YV12_TO_BGR_INIT 2
	PXOR MM7, MM7
%endmacro

%macro YV12_TO_BGR 2
	MOVD MM2, [u_ptr]
	MOVD MM3, [v_ptr]
	PUNPCKLBW MM2, MM7
	PUNPCKLBW MM3, MM7
	PSUBSW	  MM2, [U_SUB]
	PSUBSW	  MM3, [V_SUB]
	MOVQ MM4, MM2
	MOVQ MM5, MM3
	PMULLW MM2, [UG_MUL]
	PMULLW MM3, [VG_MUL]
	MOVQ MM6, MM2
	PUNPCKHWD MM2, MM2
	PUNPCKLWD MM6, MM6
	
	PMULLW MM4, [UB_MUL]
	MOVQ MM0, MM3
	PUNPCKHWD MM3, MM3
	PUNPCKLWD MM0, MM0
	PADDSW MM2, MM3
	PADDSW MM6, MM0
	PMULLW MM5, [VR_MUL]
	

	MOVQ MM0, [y_ptr]
	MOVQ MM1, MM0
	PUNPCKHBW MM1, MM7
	PUNPCKLBW MM0, MM7
	PSUBSW	  MM1, [Y_SUB]
	PSUBSW	  MM0, [Y_SUB]
	PMULLW MM1, [Y_MUL]
	PMULLW MM0, [Y_MUL]	
	MOVQ [TEMP_Y2], MM1
	MOVQ [TEMP_Y1], MM0
	PSUBSW MM1, MM2
	PSUBSW MM0, MM6
	PSRAW MM1, SCALEBITS_OUT
	PSRAW MM0, SCALEBITS_OUT
	PACKUSWB MM0, MM1
	MOVQ [TEMP_G1], MM0
	
	MOVQ MM0, [y_ptr+y_stride]
	MOVQ MM1, MM0
	PUNPCKHBW MM1, MM7
	PUNPCKLBW MM0, MM7
	PSUBSW	  MM1, [Y_SUB]
	PSUBSW	  MM0, [Y_SUB]
	PMULLW MM1, [Y_MUL]
	PMULLW MM0, [Y_MUL]	
	MOVQ MM3, MM1
	PSUBSW MM1, MM2
	MOVQ MM2, MM0
	PSUBSW MM0, MM6
	PSRAW MM1, SCALEBITS_OUT
	PSRAW MM0, SCALEBITS_OUT
	PACKUSWB MM0, MM1
	MOVQ [TEMP_G2], MM0
	
	
	MOVQ MM0, MM4
	PUNPCKHWD MM4, MM4
	PUNPCKLWD MM0, MM0
	MOVQ MM1, MM3
	PADDSW MM3, MM4
	MOVQ MM7, MM2
	PADDSW MM2, MM0
	PSRAW MM3, SCALEBITS_OUT
	PSRAW MM2, SCALEBITS_OUT
	PACKUSWB MM2, MM3
	MOVQ [TEMP_B2], MM2
	
	MOVQ MM3, [TEMP_Y2]	
	MOVQ MM2, [TEMP_Y1]	
	MOVQ MM6, MM3
	PADDSW MM3, MM4
	MOVQ MM4, MM2
	PADDSW MM2, MM0
	PSRAW MM3, SCALEBITS_OUT
	PSRAW MM2, SCALEBITS_OUT
	PACKUSWB MM2, MM3
	MOVQ [TEMP_B1], MM2
	
	MOVQ MM0, MM5
	PUNPCKHWD MM5, MM5
	PUNPCKLWD MM0, MM0
	PADDSW MM1, MM5
	PADDSW MM7, MM0
	PSRAW MM1, SCALEBITS_OUT
	PSRAW MM7, SCALEBITS_OUT
	PACKUSWB MM7, MM1
	PADDSW MM6, MM5
	PADDSW MM4, MM0
	PSRAW MM6, SCALEBITS_OUT
	PSRAW MM4, SCALEBITS_OUT
	PACKUSWB MM4, MM6
	
	MOVQ MM0, [TEMP_B1]
	MOVQ MM1, [TEMP_G1]
	MOVQ MM6, MM7
	MOVQ MM2, MM0
	PUNPCKLBW MM2, MM4
	PUNPCKHBW MM0, MM4
	PXOR MM7, MM7
	MOVQ MM3, MM1
	PUNPCKLBW MM1, MM7
	PUNPCKHBW MM3, MM7
	MOVQ MM4, MM2
	PUNPCKLBW MM2, MM1
	PUNPCKHBW MM4, MM1
	MOVQ MM5, MM0
	PUNPCKLBW MM0, MM3
	PUNPCKHBW MM5, MM3

%if %1 == 3
	MOVQ [ x_ptr ], MM2
	PSRLQ MM2, 32
	MOVQ [ x_ptr + 3 ], MM2
	MOVQ [ x_ptr + 6 ], MM4
	PSRLQ MM4, 32
	MOVQ [ x_ptr + 9 ], MM4
	MOVQ [ x_ptr + 12 ], MM0
	PSRLQ MM0, 32
	MOVQ [ x_ptr + 15 ], MM0	
	MOVQ MM2, MM5
	PSRLQ MM0, 8
	PSLLQ MM2, 32
	PSRLQ MM5, 32
	PSRLQ MM2, 16
	POR MM0, MM2
	PSLLQ MM5, 40
	POR MM5, MM0
	MOVQ [ x_ptr + 16 ], MM5
	
	MOVQ MM0, [TEMP_B2]
	MOVQ MM1, [TEMP_G2]
	MOVQ MM2, MM0
	PUNPCKLBW MM2, MM6
	PUNPCKHBW MM0, MM6
	MOVQ MM3, MM1
	PUNPCKLBW MM1, MM7
	PUNPCKHBW MM3, MM7
	MOVQ MM4, MM2
	PUNPCKLBW MM2, MM1
	PUNPCKHBW MM4, MM1
	MOVQ MM5, MM0
	PUNPCKLBW MM0, MM3
	PUNPCKHBW MM5, MM3

	MOVQ [ x_ptr + x_stride ], MM2
	PSRLQ MM2, 32
	MOVQ [ x_ptr + x_stride + 3 ], MM2
	MOVQ [ x_ptr + x_stride + 6 ], MM4
	PSRLQ MM4, 32
	MOVQ [ x_ptr + x_stride + 9 ], MM4
	MOVQ [ x_ptr + x_stride + 12 ], MM0
	PSRLQ MM0, 32
	MOVQ [ x_ptr + x_stride + 15 ], MM0	
	MOVQ MM2, MM5
	PSRLQ MM0, 8
	PSLLQ MM2, 32
	PSRLQ MM5, 32
	PSRLQ MM2, 16
	POR MM0, MM2
	PSLLQ MM5, 40
	POR MM5, MM0
	MOVQ [ x_ptr + x_stride + 16 ], MM5

%else
	MOVQ [ x_ptr ], MM2
	MOVQ [ x_ptr + 8 ], MM4
	MOVQ [ x_ptr + 16 ], MM0
	MOVQ [ x_ptr + 24 ], MM5
	
	MOVQ MM0, [TEMP_B2]
	MOVQ MM1, [TEMP_G2]
	MOVQ MM2, MM0
	PUNPCKLBW MM2, MM6
	PUNPCKHBW MM0, MM6
	MOVQ MM3, MM1
	PUNPCKLBW MM1, MM7
	PUNPCKHBW MM3, MM7
	MOVQ MM4, MM2
	PUNPCKLBW MM2, MM1
	PUNPCKHBW MM4, MM1
	MOVQ MM5, MM0
	PUNPCKLBW MM0, MM3
	PUNPCKHBW MM5, MM3
	
	MOVQ [ x_ptr + x_stride ], MM2
	MOVQ [ x_ptr + x_stride + 8 ], MM4
	MOVQ [ x_ptr + x_stride + 16 ], MM0
	MOVQ [ x_ptr + x_stride + 24 ], MM5


%endif

%endmacro



%macro YV12_TO_RGB_INIT 2
	PXOR MM7, MM7
%endmacro

%macro YV12_TO_RGB 2
	MOVD MM2, [u_ptr]
	MOVD MM3, [v_ptr]
	PUNPCKLBW MM2, MM7
	PUNPCKLBW MM3, MM7
	PSUBSW	  MM2, [U_SUB]
	PSUBSW	  MM3, [V_SUB]
	MOVQ MM4, MM2
	MOVQ MM5, MM3
	PMULLW MM2, [UG_MUL]
	PMULLW MM3, [VG_MUL]
	MOVQ MM6, MM2
	PUNPCKHWD MM2, MM2
	PUNPCKLWD MM6, MM6

	PMULLW MM4, [UB_MUL]
	MOVQ MM0, MM3
	PUNPCKHWD MM3, MM3
	PUNPCKLWD MM0, MM0
	PADDSW MM2, MM3
	PADDSW MM6, MM0
	PMULLW MM5, [VR_MUL]


	MOVQ MM0, [y_ptr]
	MOVQ MM1, MM0
	PUNPCKHBW MM1, MM7
	PUNPCKLBW MM0, MM7
	PSUBSW	  MM1, [Y_SUB]
	PSUBSW	  MM0, [Y_SUB]
	PMULLW MM1, [Y_MUL]
	PMULLW MM0, [Y_MUL]
	MOVQ [TEMP_Y2], MM1
	MOVQ [TEMP_Y1], MM0
	PSUBSW MM1, MM2
	PSUBSW MM0, MM6
	PSRAW MM1, SCALEBITS_OUT
	PSRAW MM0, SCALEBITS_OUT
	PACKUSWB MM0, MM1
	MOVQ [TEMP_G1], MM0

	MOVQ MM0, [y_ptr+y_stride]
	MOVQ MM1, MM0
	PUNPCKHBW MM1, MM7
	PUNPCKLBW MM0, MM7
	PSUBSW	  MM1, [Y_SUB]
	PSUBSW	  MM0, [Y_SUB]
	PMULLW MM1, [Y_MUL]
	PMULLW MM0, [Y_MUL]
	MOVQ MM3, MM1
	PSUBSW MM1, MM2
	MOVQ MM2, MM0
	PSUBSW MM0, MM6
	PSRAW MM1, SCALEBITS_OUT
	PSRAW MM0, SCALEBITS_OUT
	PACKUSWB MM0, MM1
	MOVQ [TEMP_G2], MM0


	MOVQ MM0, MM4
	PUNPCKHWD MM4, MM4
	PUNPCKLWD MM0, MM0
	MOVQ MM1, MM3
	PADDSW MM3, MM4
	MOVQ MM7, MM2
	PADDSW MM2, MM0
	PSRAW MM3, SCALEBITS_OUT
	PSRAW MM2, SCALEBITS_OUT
	PACKUSWB MM2, MM3
	MOVQ [TEMP_B2], MM2

	MOVQ MM3, [TEMP_Y2]
	MOVQ MM2, [TEMP_Y1]
	MOVQ MM6, MM3
	PADDSW MM3, MM4
	MOVQ MM4, MM2
	PADDSW MM2, MM0
	PSRAW MM3, SCALEBITS_OUT
	PSRAW MM2, SCALEBITS_OUT
	PACKUSWB MM2, MM3
	MOVQ [TEMP_B1], MM2

	MOVQ MM0, MM5
	PUNPCKHWD MM5, MM5
	PUNPCKLWD MM0, MM0
	PADDSW MM1, MM5
	PADDSW MM7, MM0
	PSRAW MM1, SCALEBITS_OUT
	PSRAW MM7, SCALEBITS_OUT
	PACKUSWB MM7, MM1
	PADDSW MM6, MM5
	PADDSW MM4, MM0
	PSRAW MM6, SCALEBITS_OUT
	PSRAW MM4, SCALEBITS_OUT
	PACKUSWB MM4, MM6

	MOVQ MM0, [TEMP_B1]
	MOVQ MM1, [TEMP_G1]
	MOVQ MM6, MM7
	MOVQ MM2, MM4
	PUNPCKLBW MM2, MM0
	PUNPCKHBW MM4, MM0
	PXOR MM7, MM7
	MOVQ MM3, MM1
	PUNPCKLBW MM1, MM7
	PUNPCKHBW MM3, MM7
	MOVQ MM0, MM2
	PUNPCKLBW MM0, MM1
	PUNPCKHBW MM2, MM1
	MOVQ MM5, MM4
	PUNPCKLBW MM4, MM3
	PUNPCKHBW MM5, MM3

%if %1 == 3
	MOVQ [ x_ptr ], MM0
	PSRLQ MM0, 32
	MOVQ [ x_ptr + 3 ], MM0
	MOVQ [ x_ptr + 6 ], MM2
	PSRLQ MM2, 32
	MOVQ [ x_ptr + 9 ], MM2
	MOVQ [ x_ptr + 12 ], MM4
	PSRLQ MM4, 32
	MOVQ [ x_ptr + 15 ], MM4
	MOVQ MM2, MM5
	PSRLQ MM4, 8
	PSLLQ MM2, 32
	PSRLQ MM5, 32
	PSRLQ MM2, 16
	POR MM4, MM2
	PSLLQ MM5, 40
	POR MM5, MM4
	MOVQ [ x_ptr + 16 ], MM5

	MOVQ MM0, [TEMP_B2]
	MOVQ MM1, [TEMP_G2]
	MOVQ MM2, MM6
	PUNPCKLBW MM2, MM0
	PUNPCKHBW MM6, MM0
	MOVQ MM3, MM1
	PUNPCKLBW MM1, MM7
	PUNPCKHBW MM3, MM7
	MOVQ MM0, MM2
	PUNPCKLBW MM0, MM1
	PUNPCKHBW MM2, MM1
	MOVQ MM5, MM6
	PUNPCKLBW MM6, MM3
	PUNPCKHBW MM5, MM3

	MOVQ [ x_ptr + x_stride ], MM0
	PSRLQ MM0, 32
	MOVQ [ x_ptr + x_stride + 3 ], MM0
	MOVQ [ x_ptr + x_stride + 6 ], MM2
	PSRLQ MM2, 32
	MOVQ [ x_ptr + x_stride + 9 ], MM2
	MOVQ [ x_ptr + x_stride + 12 ], MM6
	PSRLQ MM6, 32
	MOVQ [ x_ptr + x_stride + 15 ], MM6
	MOVQ MM2, MM5
	PSRLQ MM6, 8
	PSLLQ MM2, 32
	PSRLQ MM5, 32
	PSRLQ MM2, 16
	POR MM6, MM2
	PSLLQ MM5, 40
	POR MM5, MM6
	MOVQ [ x_ptr + x_stride + 16 ], MM5

%else
	MOVQ [ x_ptr ], MM0
	MOVQ [ x_ptr + 8 ], MM2
	MOVQ [ x_ptr + 16 ], MM4
	MOVQ [ x_ptr + 24 ], MM5

	MOVQ MM0, [TEMP_B2]
	MOVQ MM1, [TEMP_G2]
	MOVQ MM2, MM6
	PUNPCKLBW MM2, MM0
	PUNPCKHBW MM6, MM0
	MOVQ MM3, MM1
	PUNPCKLBW MM1, MM7
	PUNPCKHBW MM3, MM7
	MOVQ MM0, MM2
	PUNPCKLBW MM0, MM1
	PUNPCKHBW MM2, MM1
	MOVQ MM5, MM6
	PUNPCKLBW MM6, MM3
	PUNPCKHBW MM5, MM3

	MOVQ [ x_ptr + x_stride ], MM0
	MOVQ [ x_ptr + x_stride + 8 ], MM2
	MOVQ [ x_ptr + x_stride + 16 ], MM6
	MOVQ [ x_ptr + x_stride + 24 ], MM5

%endif

%endmacro


bgr_y_mul		DQ	0000083910210323H
bgr_u_mul		DQ	0000FB44F6B00E0CH
bgr_v_mul		DQ	00000E0CF439FDBAH

rgb_y_mul		DQ	0000032310210839H
rgb_u_mul		DQ	00000E0CF6B0FB44H
rgb_v_mul		DQ	0000FDBAF4390E0CH

Y_SUB			DQ	0010001000100010H
U_SUB			DQ	0080008000800080H
V_SUB			DQ	0080008000800080H

Y_MUL			DQ	004A004A004A004AH

UG_MUL			DQ	0019001900190019H
VG_MUL			DQ	0034003400340034H

UB_MUL			DQ	0081008100810081H
VR_MUL			DQ	0066006600660066H

%include "colorspace_mmx.inc"


.code


MAKE_COLORSPACE bgr_to_yv12_mmx, 0, 3, 2, 2, BGR_TO_YV12, 3, -1
MAKE_COLORSPACE bgra_to_yv12_mmx, 0, 4, 2, 2, BGR_TO_YV12, 4, -1
MAKE_COLORSPACE rgb_to_yv12_mmx, 0, 3, 2, 2, RGB_TO_YV12, 3, -1
MAKE_COLORSPACE rgba_to_yv12_mmx, 0, 4, 2, 2, RGB_TO_YV12, 4, -1

MAKE_COLORSPACE yv12_to_bgr_mmx, 48, 3, 8, 2, YV12_TO_BGR, 3, -1
MAKE_COLORSPACE yv12_to_bgra_mmx, 48, 4, 8, 2, YV12_TO_BGR, 4, -1
MAKE_COLORSPACE yv12_to_rgb_mmx, 48, 3, 8, 2, YV12_TO_RGB, 3, -1
MAKE_COLORSPACE yv12_to_rgba_mmx, 48, 4, 8, 2, YV12_TO_RGB, 4, -1

end


