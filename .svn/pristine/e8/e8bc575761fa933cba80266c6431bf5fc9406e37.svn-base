


%include "x86inc.asm"

extern zero_to_32
extern pshuffb_reverse

%macro CALCULATE_LEFT_TOP_VALUE_TO_AX	0
	MOVD r0, XDC
	AND r0, 0FFFFH
	IMUL r0, 2
	MOVD r1, XLEFT1
	AND r1, 0FFFFH
	ADD ax, cx
	MOVD r1, XTOP1
	AND r1, 0FFFFH
	ADD ax, cx
	ADD ax, 2
	SHR ax, 2
%endmacro

%macro CALCULATE_N_3DC_1_EDGE	2
	MOVDQA %1, XDC
	PMULLW %1, [zero_to_32+16*3]
	PADDW %1, %2
	PADDW %1, [zero_to_32+16*2]
	PSRLW %1, 2
%endmacro

%macro LOAD_ONE_LINE_DATA		4
%if 1 == SIZE_OF_PIXEL
	PXOR XSPACE1, XSPACE1
%if 16 == %4
	MOVDQA %1, [%3]
	MOVDQA %2, %1
	PUNPCKLBW %1, XSPACE1
	PUNPCKHBW %2, XSPACE1
%elif 8 == %4
	MOVQ %1, [%3]
	PUNPCKLBW %1, XSPACE1
%else
	MOVD %1, [%3]
	PUNPCKLBW %1, XSPACE1
%endif
%else
%if 16 == %4
	MOVDQA %1, [%3   ]
	MOVDQA %2, [%3+16]
%elif 8 == %4
	MOVDQA %1, [%3]
%else
	MOVQ %1, [%3]
%endif
%endif
%endmacro

%macro STORE_ONE_LINE_DATA		3
%if 1 == SIZE_OF_PIXEL
%if 16 == %3
	PACKUSWB %1, %2
	MOVDQA [dst   ], %1
%elif 8 == %3
	PACKUSWB %1, %1
	MOVQ [dst   ], %1
%else
	PACKUSWB %1, %1
	MOVD [dst   ], %1
%endif
%else
%if 16 == %3
	MOVDQA [dst   ], %1
	MOVDQA [dst+16], %2
%endif
%endif
	ADD_ADDRESS dst, i_dst_stride
%endmacro

%macro LOAD_LEFT_TOP 1
	MOV r0, r0m
	LOAD_ONE_LINE_DATA XLEFT1, XLEFT2, r0, %1
	MOV r0, r1m
	LOAD_ONE_LINE_DATA XTOP1, XTOP2, r0, %1
%endmacro

%macro CALC_AVERAGE 2
	MOV r0, %2
	MOVD XSPACE1, r0
	PADDW %1, XSPACE1
%if 64 == %2
	PSRAW %1, 7
%elif 32 == %2
	PSRAW %1, 6
%elif 16 == %2
	PSRAW %1, 5
%elif  8 == %2
	PSRAW %1, 4
%elif  4 == %2
	PSRAW %1, 3
%endif
	PSHUFLW %1, %1, 0
	PUNPCKLQDQ %1, %1
%endmacro

%macro ADD_TWO_W 1
	MOVDQA XSPACE1, %1
	PSRLDQ XSPACE1, 2
	PADDW %1, XSPACE1
%endmacro

%macro ADD_FOUR_W 1
	PSHUFD XSPACE1, %1, 1
	PADDW %1, XSPACE1
	ADD_TWO_W %1
%endmacro

%macro ADD_EIGHT_W 1
	MOVHLPS XSPACE1, %1
	PADDW %1, XSPACE1
	ADD_FOUR_W %1
%endmacro

%macro ADD_16_UB_DATA_TO_DC_FROM_MEMORY 1
	MOVDQA XSPACE1, %1
	MOVDQA XSPACE2, XSPACE1
	PUNPCKLBW XSPACE1, XSPACE3
	PUNPCKHBW XSPACE2, XSPACE3
	PADDW XDC, XSPACE1
	PADDW XDC, XSPACE2
%endmacro

%macro CALCULATE_DC_FROM_REGISTER 1
%if %1 == 16
	MOVDQA XDC, XLEFT1
	PADDW XDC, XLEFT2
	PADDW XDC, XTOP1
	PADDW XDC, XTOP2
	ADD_EIGHT_W XDC
%elif %1 == 8
	MOVDQA XDC, XLEFT1
	PADDW XDC, XTOP1
	ADD_EIGHT_W XDC
%else
	MOVDQA XDC, XLEFT1
	PADDW XDC, XTOP1
	ADD_FOUR_W XDC
%endif
	CALC_AVERAGE XDC, %1
%endmacro

%macro CALCULATE_DC_FROM_MEMORY 1
	MOV r0, r0m
	MOV r1, r1m
%if 1 == SIZE_OF_PIXEL
	PXOR XSPACE3, XSPACE3
	PXOR XDC, XDC
%if %1 > 16
	MOV I, 0
%%CALCULATE_DC_FROM_MEMORY_LABEL_I:
	ADD_16_UB_DATA_TO_DC_FROM_MEMORY [r0+I]
	ADD_16_UB_DATA_TO_DC_FROM_MEMORY [r1+I]
	ADD I, 16
	CMP I, %1
	JL %%CALCULATE_DC_FROM_MEMORY_LABEL_I
	ADD_EIGHT_W XDC
%elif %1 == 16
	ADD_16_UB_DATA_TO_DC_FROM_MEMORY [r0]
	ADD_16_UB_DATA_TO_DC_FROM_MEMORY [r1]
	ADD_EIGHT_W XDC
%elif %1 == 8
	MOVQ XDC, [r0]
	PUNPCKLBW XDC, XSPACE3
	MOVQ XSPACE1, [r1]
	PUNPCKLBW XSPACE1, XSPACE3
	PADDW XDC, XSPACE1
	ADD_EIGHT_W XDC
%else
	MOVD XDC, [r0]
	MOVD XSPACE1, [r1]
	PUNPCKLBW XDC, XSPACE1
	PUNPCKLBW XDC, XSPACE3
	ADD_EIGHT_W XDC
%endif
	CALC_AVERAGE XDC, %1
	PACKUSWB XDC, XDC
%else
	PXOR XDC, XDC
%if %1 > 8
	MOV I, 0
%%CALCULATE_DC_FROM_MEMORY_LABEL_I:
	PADDW XDC, [r0+I]
	PADDW XDC, [r1+I]
	ADD I, 16
	CMP I, %1*SIZE_OF_PIXEL
	JL %%CALCULATE_DC_FROM_MEMORY_LABEL_I
	ADD_EIGHT_W XDC
%elif %1 == 8
	PADDW XDC, [r0]
	PADDW XDC, [r1]
	ADD_EIGHT_W XDC
%else
	PADDW XDC, [r0]
	PADDW XDC, [r1]
	ADD_FOUR_W XDC
%endif
	CALC_AVERAGE XDC, %1
%endif
%endmacro

%macro STORE_DC_TO_MEMORY 1
	MOV dst, r2m
%if 1 == SIZE_OF_PIXEL
%if %1 > 16
	MOV I, %1
%%STORE_DC_TO_MEMORY_LABEL_I:
	MOV J, 0
%%STORE_DC_TO_MEMORY_LABEL_J:
	MOVDQA [dst+J], XDC
	ADD J, 16
	CMP J, %1
	JL %%STORE_DC_TO_MEMORY_LABEL_J
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNZ %%STORE_DC_TO_MEMORY_LABEL_I
%elif %1 == 16
	MOV I, %1
%%STORE_DC_TO_MEMORY_LABEL_I:
	MOVDQA [dst], XDC
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNZ %%STORE_DC_TO_MEMORY_LABEL_I
%elif %1 == 8
	MOV I, %1
%%STORE_DC_TO_MEMORY_LABEL_I:
	MOVQ [dst], XDC
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNZ %%STORE_DC_TO_MEMORY_LABEL_I
%elif %1 == 4
	MOV I, %1
%%STORE_DC_TO_MEMORY_LABEL_I:
	MOVD [dst], XDC
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNZ %%STORE_DC_TO_MEMORY_LABEL_I
%endif
%else
%if %1 > 8
	MOV I, %1
%%STORE_DC_TO_MEMORY_LABEL_I:
	MOV J, 0
%%STORE_DC_TO_MEMORY_LABEL_J:
	MOVDQA [dst+J], XDC
	ADD J, 16
	CMP J, %1*SIZE_OF_PIXEL
	JL %%STORE_DC_TO_MEMORY_LABEL_J
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNZ %%STORE_DC_TO_MEMORY_LABEL_I
%elif %1 == 8
	MOV I, %1
%%STORE_DC_TO_MEMORY_LABEL_I:
	MOVDQA [dst], XDC
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNZ %%STORE_DC_TO_MEMORY_LABEL_I
%else
	MOV I, %1
%%STORE_DC_TO_MEMORY_LABEL_I:
	MOVQ [dst], XDC
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNZ %%STORE_DC_TO_MEMORY_LABEL_I
%endif
%endif
%endmacro

%macro CALCULATE_DC_VALUE_FROM_MEMORY_AND_STORE_DC_TO_MEMORY 1
	CALCULATE_DC_FROM_MEMORY %1
	STORE_DC_TO_MEMORY %1
%endmacro

%macro CALCULATE_0_0_ROW_VALUES 1
%if 1 == SIZE_OF_PIXEL
%if 16 == %1
	CALCULATE_LEFT_TOP_VALUE_TO_AX
	CALCULATE_N_3DC_1_EDGE XSPACE1, XTOP1
	PSRLDQ XSPACE1, 2
	MOVD XSPACE2, r0
	PSLLDQ XSPACE2, 14
	PALIGNR XSPACE1, XSPACE2, 14
	CALCULATE_N_3DC_1_EDGE XSPACE2, XTOP2
	STORE_ONE_LINE_DATA XSPACE1, XSPACE2, %1
%elif 8 == %1
	CALCULATE_LEFT_TOP_VALUE_TO_AX
	CALCULATE_N_3DC_1_EDGE XSPACE1, XTOP1
	PSRLDQ XSPACE1, 2
	MOVD XSPACE2, r0
	PSLLDQ XSPACE2, 14
	PALIGNR XSPACE1, XSPACE2, 14
	STORE_ONE_LINE_DATA XSPACE1, XSPACE2, %1
%else
	CALCULATE_LEFT_TOP_VALUE_TO_AX
	CALCULATE_N_3DC_1_EDGE XSPACE1, XTOP1
	PSRLDQ XSPACE1, 2
	MOVD XSPACE2, r0
	PSLLDQ XSPACE2, 14
	PALIGNR XSPACE1, XSPACE2, 14
	STORE_ONE_LINE_DATA XSPACE1, XSPACE2, %1
%endif
%else
%if 16 == %1
	CALCULATE_LEFT_TOP_VALUE_TO_AX
	CALCULATE_N_3DC_1_EDGE XSPACE1, XTOP1
	PSRLDQ XSPACE1, 2
	MOVD XSPACE2, r0
	PSLLDQ XSPACE2, 14
	PALIGNR XSPACE1, XSPACE2, 14
	CALCULATE_N_3DC_1_EDGE XSPACE2, XTOP2
	MOVDQA [dst], XSPACE1
	MOVDQA [dst+16], XSPACE2
	ADD_ADDRESS dst, i_dst_stride
%elif 8 == %1
	CALCULATE_LEFT_TOP_VALUE_TO_AX
	CALCULATE_N_3DC_1_EDGE XSPACE1, XTOP1
	PSRLDQ XSPACE1, 2
	MOVD XSPACE2, r0
	PSLLDQ XSPACE2, 14
	PALIGNR XSPACE1, XSPACE2, 14
	MOVDQA [dst], XSPACE1
	ADD_ADDRESS dst, i_dst_stride
%else
	CALCULATE_LEFT_TOP_VALUE_TO_AX
	CALCULATE_N_3DC_1_EDGE XSPACE1, XTOP1
	PSRLDQ XSPACE1, 2
	MOVD XSPACE2, r0
	PSLLDQ XSPACE2, 14
	PALIGNR XSPACE1, XSPACE2, 14
	MOVQ [dst], XSPACE1
	ADD_ADDRESS dst, i_dst_stride
%endif
%endif

%endmacro

%macro CALCULATE_1_N_ROW_VALUES 1
%if 1 == SIZE_OF_PIXEL
%if 16 == %1
	CALCULATE_N_3DC_1_EDGE XSPACE2, XLEFT1
	CALCULATE_N_3DC_1_EDGE XSPACE1, XLEFT2
	PACKUSWB XSPACE2, XSPACE1
	PSHUFB XSPACE2, [pshuffb_reverse_15_1]
	PACKUSWB XDC, XDC
	MOV I, 15
%%CALCULATE_1_N_ROW_VALUES_1_15:
	MOVDQA XSPACE1, XDC
	PALIGNR XSPACE1, XSPACE2, 15
	MOVDQA [dst   ], XSPACE1
	PSLLDQ XSPACE2, 1
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNE %%CALCULATE_1_N_ROW_VALUES_1_15
%elif 8 == %1
	CALCULATE_N_3DC_1_EDGE XSPACE2, XLEFT1
	PACKUSWB XSPACE2, XSPACE2
	PSHUFB XSPACE2, [pshuffb_reverse_15_1]
	PACKUSWB XDC, XDC
	MOV I, 7
%%CALCULATE_1_N_ROW_VALUES_1_7:
	MOVDQA XSPACE1, XDC
	PALIGNR XSPACE1, XSPACE2, 15
	MOVQ [dst   ], XSPACE1
	PSLLDQ XSPACE2, 1
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNE %%CALCULATE_1_N_ROW_VALUES_1_7
%else
	CALCULATE_N_3DC_1_EDGE XSPACE2, XLEFT1
	PACKUSWB XSPACE2, XSPACE2
	PSHUFB XSPACE2, [pshuffb_reverse_15_1]
	PACKUSWB XDC, XDC
	MOV I, 3
%%CALCULATE_1_N_ROW_VALUES_1_3:
	MOVDQA XSPACE1, XDC
	PALIGNR XSPACE1, XSPACE2, 15
	MOVD [dst   ], XSPACE1
	PSLLDQ XSPACE2, 1
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNE %%CALCULATE_1_N_ROW_VALUES_1_3
%endif
%else
%if 16 == %1
	CALCULATE_N_3DC_1_EDGE XSPACE2, XLEFT1
	PSHUFB XSPACE2, [pshuffb_reverse_7_1]
	MOV I, 7
%%CALCULATE_1_N_ROW_VALUES_1_7:
	MOVDQA XSPACE1, XDC
	PALIGNR XSPACE1, XSPACE2, 14
	MOVDQA [dst   ], XSPACE1
	MOVDQA [dst+16], XDC
	PSLLDQ XSPACE2, 2
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNE %%CALCULATE_1_N_ROW_VALUES_1_7
	CALCULATE_N_3DC_1_EDGE XSPACE2, XLEFT2
	PSHUFB XSPACE2, [pshuffb_reverse]
	MOV I, 8
%%CALCULATE_1_15_ROW_VALUES_8_15:
	MOVDQA XSPACE1, XDC
	PALIGNR XSPACE1, XSPACE2, 14
	MOVDQA [dst   ], XSPACE1
	MOVDQA [dst+16], XDC
	PSLLDQ XSPACE2, 2
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNE %%CALCULATE_1_15_ROW_VALUES_8_15
%elif 8 == %1
	CALCULATE_N_3DC_1_EDGE XSPACE2, XLEFT1
	PSHUFB XSPACE2, [pshuffb_reverse_7_1]
	MOV I, 7
%%CALCULATE_1_N_ROW_VALUES_1_7:
	MOVDQA XSPACE1, XDC
	PALIGNR XSPACE1, XSPACE2, 14
	MOVDQA [dst   ], XSPACE1
	PSLLDQ XSPACE2, 2
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNE %%CALCULATE_1_N_ROW_VALUES_1_7
%else
	CALCULATE_N_3DC_1_EDGE XSPACE2, XLEFT1
	PSHUFB XSPACE2, [pshuffb_reverse_7_1]
	MOV I, 3
%%CALCULATE_1_N_ROW_VALUES_1_4:
	MOVDQA XSPACE1, XDC
	PALIGNR XSPACE1, XSPACE2, 14
	MOVQ [dst   ], XSPACE1
	PSLLDQ XSPACE2, 2
	ADD_ADDRESS dst, i_dst_stride
	DEC I
	JNE %%CALCULATE_1_N_ROW_VALUES_1_4
%endif
%endif
%endmacro

%macro CALCULATE_0_N_ROW_VALUES 1
	MOV dst, r2m
	CALCULATE_0_0_ROW_VALUES %1
	CALCULATE_1_N_ROW_VALUES %1
%endmacro

%macro X265_INTRA_PRED_DC_HELP_SSSE3 2
	%define			dst				r4
	%define			I				r3
	%define			J				r2
	%define			i_dst_stride	r3m
	%define			XSPACE1			XMMR0
	%define			XSPACE2			XMMR7
	%define			XSPACE3			XMMR5
	%define			XLEFT1			XMMR1
	%define			XLEFT2			XMMR2
	%define			XTOP1			XMMR3
	%define			XTOP2			XMMR4
	%define			XDC				XMMR6
cglobal %1, 0, 7

%if %2 < 32
	MOV r0, r4m
	CMP r0, 0
	JNE %%X265_INTRA_PRED_DC_HELP_SSSE3_COPY_DC_VALUE
	LOAD_LEFT_TOP %2
	CALCULATE_DC_FROM_REGISTER %2
	CALCULATE_0_N_ROW_VALUES %2
	JMP %%X265_INTRA_PRED_DC_HELP_SSSE3_EXIT
%%X265_INTRA_PRED_DC_HELP_SSSE3_COPY_DC_VALUE:
%endif
	CALCULATE_DC_VALUE_FROM_MEMORY_AND_STORE_DC_TO_MEMORY %2
%if %2 < 32
%%X265_INTRA_PRED_DC_HELP_SSSE3_EXIT:
%endif
	RET
%endmacro

%if 1 == SIZE_OF_PIXEL
SECTION .rodata align=16
pshuffb_reverse_15_1		DB		0, 15, 14, 13, 12, 11, 10, 9
							DB		8,  7,  6,  5,  4,  3,  2, 1

%else
SECTION .rodata align=16
pshuffb_reverse_7_1			DB		0, 0, 14, 15, 12, 13, 10, 11
							DB		8, 9,  6,  7,  4,  5,  2,  3
%endif

SECTION .text align=16
X265_INTRA_PRED_DC_HELP_SSSE3 intra_pred_mode_1_0_8_ssse3,  4
X265_INTRA_PRED_DC_HELP_SSSE3 intra_pred_mode_1_1_8_ssse3,  8
X265_INTRA_PRED_DC_HELP_SSSE3 intra_pred_mode_1_2_8_ssse3, 16
X265_INTRA_PRED_DC_HELP_SSSE3 intra_pred_mode_1_3_8_ssse3, 32
X265_INTRA_PRED_DC_HELP_SSSE3 intra_pred_mode_1_4_8_ssse3, 64



