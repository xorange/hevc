


%include "x86inc.asm"
%include "transform_1_3_ssse3_x86-a.inc"


extern pshuffq_zero
extern pshuffd_zero
extern partial_bufferfly_32_t32
extern partial_bufferfly_inverse_32_t32
extern pshuffd_w
extern partial_bufferfly_32_t32_1
extern partial_bufferfly_32_t32_2

SECTION .rodata align=16

SECTION .text align=16

%macro			CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3				5
%if %4 == E_O_FLAGS
	MATRIX_TRANSPOSE_SRC_SSSE3  0, 0, %5
	MATRIX_TRANSPOSE_SRC_SSSE3 24, 8, %5
	MOV r0, (15*SIZE_OF_ONE_EO)
	MOV K, 0
%%CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3_K1:
	CALCULATE_ONE_E_O_PARTIAL_BUFFER_FLY_SSSE3 %1, %2, TEMP_SRC, 0
	ADD K, SIZE_OF_ONE_EO
	SUB r0, SIZE_OF_ONE_EO
	CMP K, SIZE_OF_ONE_EO * 8
	JL %%CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3_K1
	MATRIX_TRANSPOSE_SRC_SSSE3  8, 0, %5
	MATRIX_TRANSPOSE_SRC_SSSE3 16, 8, %5
	MOV r0, (15*SIZE_OF_ONE_EO)
	MOV K, 0
%%CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3_K2:
	CALCULATE_ONE_E_O_PARTIAL_BUFFER_FLY_SSSE3 %1, %2, TEMP_SRC, (SIZE_OF_ONE_EO*8)
	ADD K, SIZE_OF_ONE_EO
	SUB r0, SIZE_OF_ONE_EO
	CMP K, SIZE_OF_ONE_EO * 8
	JL %%CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3_K2
%else
%if %4 == EE_EO_FLAGS
	MOV r0, (15*SIZE_OF_ONE_EO)
%elif %4 == EEE_EEO_FLAGS
	MOV r0, ( 7*SIZE_OF_ONE_EO)
%elif %4 == EEEE_EEEO_FLAGS
	MOV r0, ( 3*SIZE_OF_ONE_EO)
%endif
	MOV K, 0
%%CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3_K:
	CALCULATE_ONE_E_O_PARTIAL_BUFFER_FLY_SSSE3 %1, %2, %3, 0
	ADD K, SIZE_OF_ONE_EO
	SUB r0, SIZE_OF_ONE_EO
%if %4 == EE_EO_FLAGS
	CMP K, SIZE_OF_ONE_EO * 8
%elif %4 == EEE_EEO_FLAGS
	CMP K, SIZE_OF_ONE_EO * 4
%elif %4 == EEEE_EEEO_FLAGS
	CMP K, SIZE_OF_ONE_EO * 2
%endif
	JL %%CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3_K
%endif
%endmacro

%macro			CALCULATE_DST_PARTIAL_BUFFER_FLY32_SSSE3					3
%if 8 == DCT_STEP
	%define		CDPBF32_DST						TEMP_SRC
	%define		CDPBF32_STRIDE					8
%else
	%define		CDPBF32_DST						DST
	%define		CDPBF32_STRIDE					LINE_LENGTH
%endif

%if %2 == SIXTEEN_1_FLAGS
	%define		CDPBF32_START					 0
	%define		CDPBF32_INCREASE				16
%elif %2 == SIXTEEN_2_FLAGS
	%define		CDPBF32_START					 8
	%define		CDPBF32_INCREASE				16
%elif %2 == EIGHT_FLAGS
	%define		CDPBF32_START					 4
	%define		CDPBF32_INCREASE				 8
%elif %2 == FOUR_FLAGS
	%define		CDPBF32_START					 2
	%define		CDPBF32_INCREASE				 4
%elif %2 == TWO_FLAGS
	%define		CDPBF32_START					 1
	%define		CDPBF32_INCREASE				 2
%endif

	MOV K, SIZE_OF_INT16_T*CDPBF32_STRIDE*CDPBF32_START
	LEA TCOEFF, [partial_bufferfly_32_t32_1+(SIZE_OF_ONE_EO*8)*CDPBF32_START]
%%CALCULATE_DST_PARTIAL_BUFFER_FLY32_SSSE3_K:
	CLEAR_XMMR1_AND_XMMR2_SSSE3

%if %2 == SIXTEEN_1_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  0,  1, %1, 0
%elif %2 == SIXTEEN_2_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  0,  1, %1, 0
%elif %2 == EIGHT_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  0,  3, %1, 0
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  1,  2, %1, 1
%elif %2 == FOUR_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  0,  7, %1, 0
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  1,  6, %1, 1
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  2,  5, %1, 2
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  3,  4, %1, 3
%elif %2 == TWO_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  0, 15, %1, 0
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  1, 14, %1, 1
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  2, 13, %1, 2
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  3, 12, %1, 3
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  4, 11, %1, 4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  5, 10, %1, 5
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  6,  9, %1, 6
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_SSSE3  7,  8, %1, 7
%endif

	ADD_OFFSET_AND_SHIFT_XMMR1_AND_XMMR2_SSSE3
	STORE_EIGHT_INT16_T_SSSE3 [CDPBF32_DST+K], XMMR1, %3
	ADD K, SIZE_OF_INT16_T*CDPBF32_STRIDE*CDPBF32_INCREASE
	ADD TCOEFF, ((SIZE_OF_ONE_EO*8)*CDPBF32_INCREASE)
	CMP K, SIZE_OF_INT16_T*CDPBF32_STRIDE*32
	JL %%CALCULATE_DST_PARTIAL_BUFFER_FLY32_SSSE3_K

	%undef		CDPBF32_START
	%undef		CDPBF32_INCREASE
%endmacro

%macro			CALCULATE_ONE_LINE_DST_PARTIAL_BUFFER_FLY32_SSSE3				4
	MOV SRC, r1m
	IMUL SRC, SIZE_OF_INT16_T
	IMUL SRC, J
	ADD SRC, %1
	CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3 E,    O,    TEMP_SRC, E_O_FLAGS,       %3
	CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3 EE,   EO,   E,        EE_EO_FLAGS,     %3
	CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3 EEE,  EEO,  EE,       EEE_EEO_FLAGS,   %3
	CALCULATE_E_O_PARTIAL_BUFFER_FLY32_SSSE3 EEEE, EEEO, EEE,      EEEE_EEEO_FLAGS, %3
%if 8 == DCT_STEP
	MOV DST, LINE_LENGTH * SIZE_OF_INT16_T
%else
	MOV DST, SIZE_OF_INT16_T
%endif
	IMUL DST, J
	ADD DST, %2
	MOVDQA XSHUFFDW, [pshuffd_w]
	CALCULATE_DST_PARTIAL_BUFFER_FLY32_SSSE3 EEEE, SIXTEEN_1_FLAGS, %4
	CALCULATE_DST_PARTIAL_BUFFER_FLY32_SSSE3 EEEO, SIXTEEN_2_FLAGS, %4
	CALCULATE_DST_PARTIAL_BUFFER_FLY32_SSSE3 EEO,  EIGHT_FLAGS,     %4
	CALCULATE_DST_PARTIAL_BUFFER_FLY32_SSSE3 EO,   FOUR_FLAGS,      %4
	CALCULATE_DST_PARTIAL_BUFFER_FLY32_SSSE3 O,    TWO_FLAGS,       %4
%if 8 == DCT_STEP
	MATRIX_TRANSPOSE_TMP_COEFF_SSSE3  0
	MATRIX_TRANSPOSE_TMP_COEFF_SSSE3  8
	MATRIX_TRANSPOSE_TMP_COEFF_SSSE3 16
	MATRIX_TRANSPOSE_TMP_COEFF_SSSE3 24
%endif
%endmacro

%macro			CALCULATE_ONE_LINE_DST_DCT32_SSSE3				4
%if 1 == DCT_STEP
	MOV SRC, LINE_LENGTH * SIZE_OF_INT16_T
	IMUL SRC, J
	ADD SRC, %1
	LOAD_EIGHT_INT16_T_SSSE3 XMM1, [SRC                    ], %3
	LOAD_EIGHT_INT16_T_SSSE3 XMM2, [SRC+  8*SIZE_OF_INT16_T], %3
	LOAD_EIGHT_INT16_T_SSSE3 XMM3, [SRC+ 16*SIZE_OF_INT16_T], %3
	LOAD_EIGHT_INT16_T_SSSE3 XMM4, [SRC+ 24*SIZE_OF_INT16_T], %3
	MOV DST, SIZE_OF_INT32_T
	IMUL DST, J
	ADD DST, %2
	MOV K, 0
	MOV r2, 0
%%CALCULATE_ONE_LINE_DST_DCT32_SSSE3_K:
	MOVDQA XMM0, XMM1
	PMADDWD XMM0, [partial_bufferfly_32_t32+K]
	MOVDQA XMM7, XMM2
	PMADDWD XMM7, [partial_bufferfly_32_t32+K+16]
	PADDD XMM0, XMM7
	MOVDQA XMM7, XMM3
	PMADDWD XMM7, [partial_bufferfly_32_t32+K+32]
	PADDD XMM0, XMM7
	MOVDQA XMM7, XMM4
	PMADDWD XMM7, [partial_bufferfly_32_t32+K+48]
	PADDD XMM0, XMM7
	MOVHLPS XMM7, XMM0
	PADDD XMM0, XMM7
	MOVDQA XMM7, XMM0
	PSRLDQ XMM7, 4
	PADDD XMM0, XMM7
	PADDD XMM0, XOFFSET
	PSRAD XMM0, XSHIFT
	MOVD r0, XMM0
	MOV [DST+r2], r0
	ADD r2, LINE_LENGTH*SIZE_OF_INT32_T
	ADD K, LINE_LENGTH*   SIZE_OF_INT16_T
	CMP K, LINE_LENGTH*32*SIZE_OF_INT16_T
	JL %%CALCULATE_ONE_LINE_DST_DCT32_SSSE3_K
%else
	MOV DST, SIZE_OF_INT32_T
	IMUL DST, J
	ADD DST, %2
	MOV K, 0
	LEA r2, [partial_bufferfly_32_t32_2]
%%CALCULATE_ONE_LINE_DST_DCT32_SSSE3_K:
	PXOR XMMR1, XMMR1
	PXOR XMMR2, XMMR2
	MOV r0, SIZE_OF_INT16_T
	IMUL r0, J
	ADD r0, %1
	MOV r1, 0
%%CALCULATE_ONE_LINE_DST_DCT32_SSSE3_LOOP:
	LOAD_EIGHT_INT16_T_SSSE3 XSPACE1, [r0], %3
	LOAD_EIGHT_INT16_T_SSSE3 XSPACE3, [r0+LINE_LENGTH*SIZE_OF_INT16_T], %3
	MOVDQA XSPACE2, XSPACE1
	PUNPCKLWD XSPACE1, XSPACE3
	PUNPCKHWD XSPACE2, XSPACE3
	PMADDWD XSPACE1, [r2+r1]
	PMADDWD XSPACE2, [r2+r1]
	PADDD XMMR1, XSPACE1
	PADDD XMMR2, XSPACE2
	ADD r1, SIZE_OF_INT16_T*8
	ADD r0, LINE_LENGTH*SIZE_OF_INT16_T*2
	CMP r1, SIZE_OF_INT16_T*8*16
	JL %%CALCULATE_ONE_LINE_DST_DCT32_SSSE3_LOOP
	PADDD XMMR1, XOFFSET
	PSRAD XMMR1, XSHIFT
	PADDD XMMR2, XOFFSET
	PSRAD XMMR2, XSHIFT
	STORE_EIGHT_INT16_T_SSSE3 [DST+K], XMMR1, %4
	STORE_EIGHT_INT16_T_SSSE3 [DST+K+16], XMMR2, %4
	ADD r2, SIZE_OF_INT16_T*8*16
	ADD K, LINE_LENGTH*   SIZE_OF_INT32_T
	CMP K, LINE_LENGTH*32*SIZE_OF_INT32_T
	JL %%CALCULATE_ONE_LINE_DST_DCT32_SSSE3_K
%endif
%endmacro

%macro X265_TR_QUANT_X_TR_32x32_HELP_SSSE3			4
cglobal %1, 0, 7
	%define				SIZE_OF_ONE_EO				 (2*8)
	%define				SIZE_OF_INT16_T				 2
	%define				SIZE_OF_INT32_T				 4
	%define				LINE_LENGTH					32
	%define				LINE_SIZE_INT16_T			(LINE_LENGTH*SIZE_OF_INT16_T)
	%define				NUM_OF_E_O					16
	%define				NUM_OF_EE_EO				 8
	%define				NUM_OF_EEE_EEO				 4
	%define				NUM_OF_EEEE_EEEO			 2
	%define				NUM_OF_ALL_E_O				((NUM_OF_E_O+NUM_OF_EE_EO+NUM_OF_EEE_EEO+NUM_OF_EEEE_EEEO)*2)
	%define				SIZE_OF_ALL_E_O				(NUM_OF_ALL_E_O*SIZE_OF_ONE_EO)
	%define				SIZE_OF_E					(NUM_OF_E_O*SIZE_OF_ONE_EO)
	%define				SIZE_OF_O					(NUM_OF_E_O*SIZE_OF_ONE_EO)
	%define				SIZE_OF_E_O					(SIZE_OF_E+SIZE_OF_O)
	%define				SIZE_OF_EE					(NUM_OF_EE_EO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EO					(NUM_OF_EE_EO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EE_EO				(SIZE_OF_EE+SIZE_OF_EO)
	%define				SIZE_OF_EEE					(NUM_OF_EEE_EEO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EEO					(NUM_OF_EEE_EEO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EEE_EEO				(SIZE_OF_EEE+SIZE_OF_EEO)
	%define				SIZE_OF_EEEE				(NUM_OF_EEEE_EEEO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EEEO				(NUM_OF_EEEE_EEEO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EEEE_EEEO			(SIZE_OF_EEEE+SIZE_OF_EEEO)
	%define				TEMP_COEFF_SIZE				(LINE_SIZE_INT16_T*LINE_LENGTH)
	%define				TEMP_SRC_SIZE				(SIZE_OF_INT16_T*8*LINE_LENGTH)
	%define				TEMP_COEFF					r6
	%define				TEMP_SRC					(TEMP_COEFF+TEMP_COEFF_SIZE)
	%define				E							(TEMP_SRC+TEMP_SRC_SIZE)
	%define				EE							E+SIZE_OF_E_O
	%define				EEE							EE+SIZE_OF_EE_EO
	%define				EEEE						EEE+SIZE_OF_EEE_EEO
	%define				O							E+SIZE_OF_E
	%define				EO							EE+SIZE_OF_EE
	%define				EEO							EEE+SIZE_OF_EEE
	%define				EEEO						EEEE+SIZE_OF_EEEE
	%define				J							r5
	%define				K							r4
	%define				SRC							r3
	%define				DST							r3
	%define				TCOEFF						r2
	%define				XSPACE1						XMMR0
	%define				XSPACE2						XMMR7
	%define				XSPACE3						XMMR3
	%define				XSHUFFDW					XMMR4
	%define				XOFFSET						XMMR6
	%define				XSHIFT						XMMR5
	%define				DCT_STEP					%2
	%define				E_O_FLAGS					1
	%define				EE_EO_FLAGS					2
	%define				EEE_EEO_FLAGS				3
	%define				EEEE_EEEO_FLAGS				4
	%define				SIXTEEN_1_FLAGS				1
	%define				SIXTEEN_2_FLAGS				2
	%define				EIGHT_FLAGS					3
	%define				FOUR_FLAGS					4
	%define				TWO_FLAGS					5
	%define				SIZE_OF_STACK				(SIZE_OF_ALL_E_O+TEMP_SRC_SIZE+TEMP_COEFF_SIZE)

	mov r6, esp
	and r6, 0xFFFFFFF0
	sub r6, SIZE_OF_STACK

	MOV r2, r3m
	SUB r2, 4
	GET_XOFFSET_AND_XSHIFT_SSSE3 r2
	MOV J, 0
%%X265_TR_QUANT_X_TR_32x32_HELP_SSSE3_J1:
	CALCULATE_ONE_LINE_DST_PARTIAL_BUFFER_FLY32_SSSE3 r0m, TEMP_COEFF, %3, MOVDQA
	ADD J, 8
	CMP J, 32
	JL %%X265_TR_QUANT_X_TR_32x32_HELP_SSSE3_J1

	MOV r2, 11
	GET_XOFFSET_AND_XSHIFT_SSSE3 r2
	MOV J, 0
%%X265_TR_QUANT_X_TR_32x32_HELP_SSSE3_J2:
	CALCULATE_ONE_LINE_DST_DCT32_SSSE3 TEMP_COEFF, r2m, MOVDQA, %4
	ADD J,  DCT_STEP
	CMP J,  32
	JL %%X265_TR_QUANT_X_TR_32x32_HELP_SSSE3_J2

	RET
%endmacro

%macro			CALCULATE_ONE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3		4
	CLEAR_XMMR1_AND_XMMR2_SSSE3
%if %2 == O_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  1, 31, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  3, 29, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  5, 27, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  7, 25, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  9, 23, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3 11, 21, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3 13, 19, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3 15, 17, 32, %3, %4
%elif %2 == EO_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  2, 30, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  6, 26, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3 10, 22, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3 14, 18, 32, %3, %4
%elif %2 == EEO_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  4, 28, 32, %3, %4
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3 12, 20, 32, %3, %4
%elif %2 == EEEO_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  8, 24, 32, %3, %4
%elif %2 == EEEE_FLAGS
	MUL_AND_ADD_ONE_LINE_NUM_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  0, 16, 32, %3, %4
%endif
	STORE_EIGHT_INT32_T_SSSE3 XMMR1, XMMR2, %1, MOVDQA
%endmacro

%macro			CALCULATE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3			4
	MOV K, 0
	LEA TCOEFF, [partial_bufferfly_inverse_32_t32]
%%CALCULATE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3_LABEL_K:
	CALCULATE_ONE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 %1, %2, %3, %4
	ADD TCOEFF, SIZE_OF_ONE_EO
	ADD K, SIZE_OF_ONE_EO
%if %2 == O_FLAGS
	CMP K, SIZE_OF_ONE_EO * 16
%elif %2 == EO_FLAGS
	CMP K, SIZE_OF_ONE_EO * 8
%elif %2 == EEO_FLAGS
	CMP K, SIZE_OF_ONE_EO * 4
%elif %2 == EEEO_FLAGS
	CMP K, SIZE_OF_ONE_EO * 2
%elif %2 == EEEE_FLAGS
	CMP K, SIZE_OF_ONE_EO * 2
%endif
	JL %%CALCULATE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3_LABEL_K
%endmacro


%macro			CALCULATE_EIGHT_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3	5
	MOV K, 0
%if %3 == FORWARD
	MOV EO_ADDRESS, SIZE_OF_ONE_EO*%1
%else
	MOV EO_ADDRESS, SIZE_OF_ONE_EO*(15-%1)
%endif
%%CALCULATE_EIGHT_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3_K:
	CALCULATE_ONE_DST_PARTIAL_BUFFER_FLY_INVERSE_SSSE3 %1, %3
	ADD K, SIZE_OF_ONE_EO
%if %3 == FORWARD
	ADD EO_ADDRESS, SIZE_OF_ONE_EO
%else
	SUB EO_ADDRESS, SIZE_OF_ONE_EO
%endif
	CMP K, SIZE_OF_ONE_EO * 8
	JL %%CALCULATE_EIGHT_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3_K
	MATRIX_TRANSPOSE_AND_SAVE_TO_DST_SSSE3 %2, %4, %5
%endmacro

%macro			CALCULATE_ALL_E_AND_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 		2
	CALCULATE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 O,    O_FLAGS,    %1, %2
	CALCULATE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 EO,   EO_FLAGS,   %1, %2
	CALCULATE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 EEO,  EEO_FLAGS,  %1, %2
	CALCULATE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 EEEO, EEEO_FLAGS, %1, %2

	CALCULATE_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 EEEE, EEEE_FLAGS, %1, %2
	CALCULATE_E_PARTIAL_BUFFER_FLY_INVERSE_SSSE3 EEEE, EEEO, EEE, 2
	CALCULATE_E_PARTIAL_BUFFER_FLY_INVERSE_SSSE3  EEE,  EEO,  EE, 4
	CALCULATE_E_PARTIAL_BUFFER_FLY_INVERSE_SSSE3   EE,   EO,   E, 8
%endmacro

%macro			CALCULATE_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3				2
	CALCULATE_EIGHT_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 0,  0, FORWARD,  %1, %2
	CALCULATE_EIGHT_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 0, 16, BACKWARD, %1, %2
	CALCULATE_EIGHT_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 8,  8, FORWARD,  %1, %2
	CALCULATE_EIGHT_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 8, 24, BACKWARD, %1, %2
%endmacro

%macro			CALCULATE_ONE_LINE_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3		5
%if FIRST_ST == %3
	MOVDQA XSHUFFDW, [pshuffd_w]
	MOV SRC, SIZE_OF_INT32_T
	IMUL SRC, J
	ADD SRC, %1
%else
	MOV SRC, SIZE_OF_INT16_T
	IMUL SRC, J
	LEA r0, [%1]
	ADD SRC, r0
%endif
	CALCULATE_ALL_E_AND_O_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 %3, %5
%if FIRST_ST == %3
	MOV DST, LINE_SIZE_INT16_T
	IMUL DST, J
	LEA r0, [%2]
	ADD DST, r0
%else
	MOV DST, r1m
	IMUL DST, SIZE_OF_INT16_T
	IMUL DST, J
	ADD DST, %2
%endif
	CALCULATE_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 %3, %5
%endmacro

%macro X265_TR_QUANT_X_ITR_32x32_HELP_SSSE3		3
cglobal %1, 0, 7
	%define				SIZE_OF_ONE_EO				 (4*8)
	%define				SIZE_OF_INT16_T				 2
	%define				SIZE_OF_INT32_T				 4
	%define				LINE_LENGTH					32
	%define				LINE_SIZE_INT16_T			(LINE_LENGTH*SIZE_OF_INT16_T)
	%define				LINE_SIZE_INT32_T			(LINE_LENGTH*SIZE_OF_INT32_T)
	%define				NUM_OF_E_O					16
	%define				NUM_OF_EE_EO				 8
	%define				NUM_OF_EEE_EEO				 4
	%define				NUM_OF_EEEE_EEEO			 4
	%define				NUM_OF_ALL_E_O				((NUM_OF_E_O+NUM_OF_EE_EO+NUM_OF_EEE_EEO+NUM_OF_EEEE_EEEO)*2)
	%define				SIZE_OF_ALL_E_O				(NUM_OF_ALL_E_O*SIZE_OF_ONE_EO)
	%define				SIZE_OF_E					(NUM_OF_E_O*SIZE_OF_ONE_EO)
	%define				SIZE_OF_O					(NUM_OF_E_O*SIZE_OF_ONE_EO)
	%define				SIZE_OF_E_O					(SIZE_OF_E+SIZE_OF_O)
	%define				SIZE_OF_EE					(NUM_OF_EE_EO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EO					(NUM_OF_EE_EO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EE_EO				(SIZE_OF_EE+SIZE_OF_EO)
	%define				SIZE_OF_EEE					(NUM_OF_EEE_EEO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EEO					(NUM_OF_EEE_EEO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EEE_EEO				(SIZE_OF_EEE+SIZE_OF_EEO)
	%define				SIZE_OF_EEEE				(NUM_OF_EEEE_EEEO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EEEO				(NUM_OF_EEEE_EEEO*SIZE_OF_ONE_EO)
	%define				SIZE_OF_EEEE_EEEO			(SIZE_OF_EEEE+SIZE_OF_EEEO)
	%define				SIZE_OF_MTB					3*16
	%define				TEMP_BLOCK_SIZE				(LINE_SIZE_INT16_T*LINE_LENGTH)
	%define				SIZE_OF_TEMP_DST			SIZE_OF_ONE_EO * 8
	%define				MTB							r6
	%define				MTB1						MTB
	%define				MTB2						MTB1+16
	%define				MTB3						MTB2+16
	%define				TEMP_BLOCK					(MTB+SIZE_OF_MTB)
	%define				TEMP_DST					(TEMP_BLOCK+TEMP_BLOCK_SIZE)
	%define				E							TEMP_DST+SIZE_OF_TEMP_DST
	%define				EE							E+SIZE_OF_E_O
	%define				EEE							EE+SIZE_OF_EE_EO
	%define				EEEE						EEE+SIZE_OF_EEE_EEO
	%define				O							E+SIZE_OF_E
	%define				EO							EE+SIZE_OF_EE
	%define				EEO							EEE+SIZE_OF_EEE
	%define				EEEO						EEEE+SIZE_OF_EEEE
	%define				J							r5
	%define				K							r4
	%define				SRC							r3
	%define				DST							r3
	%define				TCOEFF						r2
	%define				EO_ADDRESS					r2
	%define				XSPACE1						XMMR0
	%define				XSPACE2						XMMR7
	%define				XSPACE3						XMMR3
	%define				XSHUFFDW					XMMR4
	%define				XOFFSET						XMMR6
	%define				XSHIFT						XMMR5
	%define				FORWARD						1
	%define				BACKWARD					2
	%define				O_FLAGS						1
	%define				EO_FLAGS					2
	%define				EEO_FLAGS					3
	%define				EEEO_FLAGS					4
	%define				EEEE_FLAGS					5
	%define				FIRST_ST					1
	%define				SECOND_ND					2
	%define				SIZE_OF_STACK				(SIZE_OF_ALL_E_O+SIZE_OF_TEMP_DST+TEMP_BLOCK_SIZE+SIZE_OF_MTB)
	mov r6, esp
	and r6, 0xFFFFFFF0
	sub r6, SIZE_OF_STACK
	MOV r2, 7
	GET_XOFFSET_AND_XSHIFT_SSSE3 r2
	MOV J, 0
%%X265_TR_QUANT_X_ITR_32x32_HELP_SSSE3_J1:
	CALCULATE_ONE_LINE_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 r2m, TEMP_BLOCK, FIRST_ST, %2, MOVDQA
	ADD J, 8
	CMP J, 32
	JL %%X265_TR_QUANT_X_ITR_32x32_HELP_SSSE3_J1
	MOV r2, 20
	SUB r2, r3m
	GET_XOFFSET_AND_XSHIFT_SSSE3 r2
	MOV J, 0
%%X265_TR_QUANT_X_ITR_32x32_HELP_SSSE3_J2:
	CALCULATE_ONE_LINE_DST_PARTIAL_BUFFER_FLY_INVERSE32_SSSE3 TEMP_BLOCK, r0m, SECOND_ND, MOVDQA, %3
	ADD J, 8
	CMP J, 32
	JL %%X265_TR_QUANT_X_ITR_32x32_HELP_SSSE3_J2
	RET
%endmacro

X265_TR_QUANT_X_TR_32x32_HELP_SSSE3 tr_quant_x_tr_32x32_ssse3, 1, MOVDQA, MOVDQA
X265_TR_QUANT_X_ITR_32x32_HELP_SSSE3 tr_quant_x_itr_32x32_ssse3, MOVDQA, MOVDQA








